- test_class: TestNapalmBgpNeighborsCount
  test_data:
    - host: spine1
      neighbor_count: 2

                f"{header}\n"
                f"{self._result}"
            )
E           nuts.helpers.errors.NutsNornirError: An exception has occurred while executing nornir:
E           TypeError: argument of type 'NoneType' is not iterable
E
E           Traceback (most recent call last):
E             File "/usr/local/lib/python3.10/site-packages/nuts/helpers/result.py", line 172, in nuts_result_wrapper
E               return NutsResult(self.single_transform(nornir_result))
E             File "/usr/local/lib/python3.10/site-packages/nuts/base_tests/napalm_bgp_neighbors.py", line 17, in single_transform
E               if "global" not in neighbors:
E           TypeError: argument of type 'NoneType' is not iterable

/usr/local/lib/python3.10/site-packages/nuts/helpers/result.py:45: NutsNornirError
--------------------------------------------------- Captured log setup ----------------------------------------------------
WARNING  root:srl.py:61 Enabled TLS ciphers: TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES256-SHA
WARNING  root:srl.py:2503 ssl_target_name_override(=spine1.clos02.io) is auto-discovered, should be used for testing only!
ERROR    root:srl.py:406 Error occurred : invalid literal for int() with base 10: ''



- test_class: TestNapalmBgpNeighbors
  test_data:
    - host: spine1
      local_id: 10.0.0.1
      local_as: 65001
      peer: 10.0.0.2
      remote_as: 65002

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <nuts.helpers.result.NutsResult object at 0x7ff7f03d6c20>

    def validate(self) -> None:
        """Make sure the underlying result is a valid (i.e. non-failed) one."""
        if self.exception:
            header = "".join(
                traceback.format_exception_only(type(self.exception), self.exception)
            )
>           raise NutsNornirError(
                f"An exception has occurred while executing nornir:\n"
                f"{header}\n"
                f"{self._result}"
            )
E           nuts.helpers.errors.NutsNornirError: An exception has occurred while executing nornir:
E           TypeError: argument of type 'NoneType' is not iterable
E
E           Traceback (most recent call last):
E             File "/usr/local/lib/python3.10/site-packages/nuts/helpers/result.py", line 172, in nuts_result_wrapper
E               return NutsResult(self.single_transform(nornir_result))
E             File "/usr/local/lib/python3.10/site-packages/nuts/base_tests/napalm_bgp_neighbors.py", line 17, in single_transform
E               if "global" not in neighbors:
E           TypeError: argument of type 'NoneType' is not iterable

/usr/local/lib/python3.10/site-packages/nuts/helpers/result.py:45: NutsNornirError



- test_class: TestNapalmConfig
  test_data:
    - host: leaf1
      startup_equals_running_config: True
    

_______________________________ TestNapalmConfig.test_startup_equals_running_config[leaf1_] _______________________________

self = <nuts.base_tests.napalm_get_config.TestNapalmConfig object at 0x7f7cb0f7acb0>
single_result = <nuts.helpers.result.NutsResult object at 0x7f7cabfe10c0>, startup_equals_running_config = True

    @pytest.mark.nuts("startup_equals_running_config")
    def test_startup_equals_running_config(
        self, single_result, startup_equals_running_config
    ):
>       assert (
            bool(
                single_result.result["config"]["startup"]
                == single_result.result["config"]["running"]
            )
            == startup_equals_running_config
        )
E       assert False == True
E        +  where False = bool('' == '{"srl_nokia-acl:acl": {"cpm-filter": {"ipv4-filter": {"statistics-per-entry": true, "entry": [{"sequence-id": 10, "description": "Accept incoming ICMP unreachable messages", "action": {"accept": {"rate-limit": {"system-cpu-policer": "icmp"}}}, "match": {"protocol": "icmp", "icmp": {"type": "dest-unreachable", "code": [0, 1, 2, 3, 4, 13]}}}, {"sequence-id": 20, "description": "Accept incoming ICMP time-exceeded messages", "action": {"accept": {"rate-limit": {"system-cpu-policer": "icmp"}}}, "match": {"protocol": "icmp", "icmp": {"type": "time-exceeded"}}}, {"sequence-id": 30, "description": "Accept incoming ICMP parameter problem messages", "action": {"accept": {"rate-limit": {"system-cpu-policer": "icmp"}}}, "match": {"protocol": "icmp", "icmp": {"type": "param-problem"}}}, {"sequence-id": 40, "description": "Accept incoming ICMP echo messages", "action": {"accept": {"rate-limit": {"system-cpu-policer": "icmp"}}}, "match": {"protocol": "icmp", "icmp": {"type": "echo"}}}, {"sequence-id": 50, "description": "Accept incoming ICMP echo-reply messages", "action": {"accept": {"rate-limit": {"system-cpu-policer": "icmp"}}}, "match": {"protocol": "icmp", "icmp": {"type": "echo-reply"}}}, {"sequence-id": 60, "description": "Accept incoming SSH when the other host initiates the TCP connection", "action": {"accept": {}}, "match": {"protocol": "tcp", "destination-port": {"operator": "eq", "value": 22}}}, {"sequence-id": 70, "d




